Introduction to Go
Canberra Gophers Meeting
12 Aug 2014

Dave Cheney
dave@cheney.net
http://dave.cheney.net/
@davecheney

* Welcome

Thank you to Pablo Rozas-Larraondo for getting the meetup off the ground.

Thank you to our sponsor at CSIRO for the space.

Thank you for taking the time to come out tonight. 

* Who am I ?

Programming grunt from Sydney, Australia.

Passionate about all things Go since 2010.

Co-organiser of the Sydney Go Users group along with Andrew Gerrand.

* Outline of this talk

- The history of Go project

- Overview of the language

- Overview of the tools

- Possibly some questions

* History of the Go project

* Origins of Go

Go started in 2007 by Rob Pike, Robert Griesemer, Ken Thompson.

Russ Cox and Ian Lance Taylor joined soon after.

There is a story that Go was designed while waiting for a C++ program to compile.

In reality, Go was a response to the many of the factors that Rob, Robert and Ken experienced at the time with the languages in use at Google; C++, Java, and Python.

Rob Pike's 2012 paper, [[http://commandcenter.blogspot.com.au/2012/06/less-is-exponentially-more.html][Less is exponentially more]] gives an excellent overview of the environment that gave rise to Go.

* Public announcement

First public announcement November 10th, 2009. [[https://www.youtube.com/watch?v=rKnDgT73v8s][The Go Programming Language, 2009]]

.image introduction-to-go/pike-2009.png

* Open source

Go is an open source project.

All the commits, code review, design, debate, etc, are done in the open on a public mailing lists.

The only qualification for [[http://golang.org/doc/contribute.html][contributing]] to the project is free time.

* 2009 - 2012

Rapid iteration over the next 2.5 years

[[http://blog.golang.org/go-version-1-is-released][Go 1.0 was released]] on the 28th of March, 2012.

Go 1.0 marked a line in the sand

- API stability. [[http://golang.org/doc/go1compat][The Go 1 compatibility document]]

- No major language changes (there have been a few minor additions)

- [[http://blog.golang.org/the-path-to-go-1][The path to Go 1]]

* 2012 - now

3 point releases so far; Go 1.1, 1.2, and 1.3.

The fourth, Go 1.4, is on target to ship in December.

Rough 6 month release cycle; 3 month change window, 3 month stabalisation.

Big ticket features are discussed before the change window opens.

Each release has bought incremental improvements in the compilers, the runtime, the garbage collector.

New platforms and new architectures added.

* Stability

Pro:

- Your code you write today will continue to work with newer versions of Go 1.

- We assert this on every commit.

Con:

- The bar for adding a new feature is now insurmountably high.

* Language Overview

* Safety

Typed, and type safe

	var i int = -1
	var u uint = 200

	i = u	// nope
	if i > u { ... }	// nope

Array accesses are bounds checked

	s := make([]string, 10)

	for i := 0; i <= 10; i++ {
		// oops
	}

No dangling pointers, return a stack value from a function with impunity.

- Compiler will move allocations to the heap if required.
- Escape analysis will move them back if not.

* Safety, continued

All memory is zeroed if not explicitly initialised

	var q int	// initalised to 0
	var f = 7	// initalised to 7, type defaults to int

No implicit conversions; booleans and integers are not aliases

	i := 2
	if i { ... }	// nope
	if i != 0 { ... } // yes

* Good support for concurrency and communication

- Multicore is a reality

- Multiprocessing is not a solution

* Garbage collected

Eliminates the bookkeeping errors related to ownership of shared values.

Eliminates an entire class of use after free and memory leak bugs.

Performance is good and getting better every release, plans are afoot for a new concurrent compacting collector in the next 12 months.

* Speed

Go is often cited for its fast compilation, but this is only one facet of the idea of Go being a _fast_ language to program in.

- False dichotomy of static languages being "slow and painful" and dynamic languages being "fast and fun"

"Clumsy type systems drive people to dynamically typed languages" -Robert Griesemer

Specifically to address the issues

- "Fixing it by adding more software isn't going to do it" -[[http://youtu.be/rKnDgT73v8s?t=7m][Rob Pike, Nov 2009]]

* Opinionated

- Unused variables are an error.

- Unused imports are also an error.

- The compiler does not issue warnings, only errors.

- A single way to format code as defined by `go fmt` (more on this later)

* Whirlwind language tour

* Constants

Constants come in various kinds, but are by default untyped. 

Constant strings, bools, integers, floats, complex numbers.

Untyped constants operate with arbitrary precision.

.code introduction-to-go/precision.go /START OMIT/,/END OMIT/

* Types

The usual suspects

- signed integers, `int8`, `int16`, `int32`, `int64`

- unsigned integers, `uint8`, `uint6`, `uint32`, `uint64`

- aliases, `byte`, `rune`, `int`, `uint`

- booleans, `bool`

- strings, `string`

- IEEE floating point, `float32`, `float64`

- Complex type, `complex128`

* Variables

There are several ways to declare a variable in Go

	var y = 100
	var x int	// x == 0

Short variable declaration

	s := 100	

Leads to type inference

	f, err := os.Open("/etc/motd")

- `f` is a `*os.File` type
- `err` is an `error` interface type

* Expressions and Statements

Expressions are taken mostly from C.

Statements are _not_ Expressions.

	y = x++	// nope		

	if x = 1 { ... } // nope

* Arrays and Slices

Arrays are fixed sized typed vectors.

Different sized arrays are different types.

	var buf [100]byte	// an array of 100 bytes
	var buf2 [20]byte	// an array of 20 bytes

	buf = buf2	// nope

Slices are dynamically typed vectors that reference an underlying array.

	var buf, buf2 []byte

	buf = make([]byte, 20)
	buf2 = buf

You can slice an array to produce a slice

	var buf [100]byte
	var b = buf[:10]	

`b` is a slice which contains a reference to the first 10 bytes of `buf`

* Maps

Maps are a typed associative arrays or dictionaries.
	
	var population = make(map[string]int)
	population := map[string]int { "melbourne": 4077000, "sydney": 4576000 }	

Adding a value to a map

	population["canberra"] = 358222

Deleteing a value

	delete(population, "perth")	// Secessionism

Testing for a value

	brisbane := population["brisvegas"]	// 0 if not present
	brisbane, exists := population["brisvegas"]	// 0, false

* Structs

Structs are composite types

	type S struct {
		A int
		B bool
		c string
	}

There is no analog for `C` 's union type, it is fundamentally unsafe.

* Pointers

Pointers are values which point to other values

	q := 
	

No pointer arithmetic

        x := 1000
        y := &x
        y += 4          // nope

* Control flow

`if`

	if a > b & c { ... }

No need for parens, precidence headaches from C are fixed

`for`

	var numbers []int
	for i := 0; i < len(numbers); i++ { ... }

	done := false
	for !done { ... }	

	for { // loop forever }

`for` `range` over arrays, slices, and maps

	for i, num := range numbers { ... }
	for city, pop := range population { ... }

* Control flow, continued

`switch`

	var s string
	switch s {
	case "dave":
		...
	case "andrew", "pablo":
		...
	default:
		...
	}

break, goto, continue, fallthrough

* Functions

A `Max` function

	func Max(a int, b int) int {
		if a > b {
			return ar
		}
		return b
	}

Multiple return values

	func DivMod(a, b int) (int, int) {
		return a / b, a % b
	}

Multiple return values the norm, part of the error handling convention.

* Methods

A method on a struct:
func (p Person) Major() bool {
    return p.age >= 18
}
But also a method on a float64:
func (c Celsius) Freezing() bool {
    return c <= 0
}
Constraint: Methods can be defined only on types declared in the same package.
// This won't compile
func (s string) Length() int { return len(s) }

- no constructor or destructor

- use New

- discuss, var p = Point{3,4} vs p = &Point{3,4}

* Interfaces

Eschew _is_a_ in favor of _has_a_.

Anything which declares the appropriate method set implements that interface automatically.

Interface values contain both a type and a value.

.code introduction-to-go/parallelogram.go /START1 OMIT/,/END1 OMIT/

* Interfaces, continued

.play introduction-to-go/parallelogram.go /START2 OMIT/,/END2 OMIT/

* Interfaces, continued

`io.Writer`

	type Writer interface {
		Write(p []byte) (n int, err error)
	}

From the `fmt` package.

	func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error)

Here are some types that implement `io.Writer`

	*bufio.Writer
	*bytes.Buffer
	net.Conn
	*os.File

* Packages

Packages define modules 

Explicit dependencies, import "fmt", then _fmt_ 's symbols are referenced by the `fmt.` prefix.

	import "fmt"

	func main() {
		fmt.Printf("Hello %s\n", "world)
	}

Packages enabled incremental compilation and 

- Unit of compilation is the package, not the file.

- Unit of importing is the package, not a type, or a symbol.

Packages are also key to the initalisation semantics

Circular dependencies are not allowed

- If you are running into issues of circular imports in your program, you may have overused packages.

* Concurrency

Goroutines provide light weight thread per connection logic without the overhead of a thread.

- go

* Goroutines


* Channels

- send

- receive

* Select

Select allows you to choose between multiple channel operatoins

.code introduction-to-go/select.go /START OMIT/,/END OMIT/

Select also allows non-block send and receive operations

.code introduction-to-go/recv.go /START OMIT/,/END OMIT/

* Not covered

[[http://blog.golang.org/laws-of-reflection][Reflection]]

CGO

[[http://blog.golang.org/error-handling-and-go][Error handling]]

* Language implementation

* Small, well polished standard library

- The usual libc/libm cast of characters.

- Support for networking, HTTP, TLS.

- Support for common encodings, XML, JSON.

- Support for compression, tar, etc.

To a first order approximation, the std lib provides only the things needed to build Go itself.

* Excellent cross platform support

- Windows, OS X, Linux, {Free,Open,Net,DragonFly}BSD, Solaris

- NaCl, Google's Native Client runtime

- Experimental support for writing some class of Android application coming soon.

Cross platform is defined as the super set of all platforms with some not supporting a feature, rather than the lowest common denominator.

* Excellent cross architecture support

Two production compiler implementations

- gc toolchain supports arm, amd64 and i386. Support for powerpc64 in the works.

- gccgo toolchain supports all of the above and more.

Other implementations, llgo, tardis-go, etc, keep us honest by writing to the spec.

* Tools

`/usr/bin/go`

Simple, zero configuration build tool.

All commands and paths are relative to your [[http://golang.org/doc/code.html#GOPATH][$GOPATH]] workspace.

Supports conditional compilation via suffixes and build tags.

Support for cross compilation.

	GOARCH=386 GOOS=windows go build mycmd

* More tools

Read package documentation

	godoc $PKG

Lint your code

	go vet $PKG

Solve code formatting issues, once and for all

	go fmt $PKG

Built in [[http://golang.org/pkg/testing/][testing framework]], including [[http://blog.golang.org/cover][coverage reports]]

	go test $PKG
	go test -cover $PKG

Built in [[http://blog.golang.org/race-detector][race detector]] (based on [[https://code.google.com/p/data-race-test/wiki/ThreadSanitizer][ThreadSantizer]])

	go {build,test,install} -race $PKG

* Performance

Depending on your requirements; good to excellent.

Varies by architecture; amd64 is the poster child due to its ubiquity.

All platforms, amd64, 386, and arm, have improved overtime.

* Go 1.0 vs tip (Go 1.4)

.image introduction-to-go/go1-vs-tip.png _ 580

* How to get started

Start with the tour, [[https://tour.golang.org][tour.golang.org]]

Read [[http://golang.org/doc/effective_go.html][Effective Go]]

Online communities

- [[http://reddit.com/r/golang][reddit.com/r/golang]]

- [[https://groups.google.com/forum/#!forum/golang-nuts][golang-nuts mailing list]]

- [[https://plus.google.com/communities/114112804251407510571][Go+ on G+]]

* Questions

This talk is online

[[http://talks.godoc.org/github.com/davecheney/canberra-gophers/introduction-to-go.slide][talks.godoc.org/github.com/davecheney/canberra-gophers/introduction-to-go.slide]]

All the links inside the talk are clickable, I encourage you to follow them.

Also, please take the time to visit

- Rob Pike's [[http://talks.golang.org/2014/hellogophers.slide][Gophercon 2014 Keynote]]

- Francesc Campoy Flores' [[http://talks.golang.org/2013/go4python.slide][Go for Pythonistas]] and [[http://talks.golang.org/2014/go4java.slide][Go for Javaïstes]]

